// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\artur\OneDrive\Documents\pismo\pismo-challenge\internal\services\transaction_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pgstore "github.com/ArturLima/pismo/internal/store/pgstore"
	transaction "github.com/ArturLima/pismo/internal/useCases/transaction"
	gomock "github.com/golang/mock/gomock"
)

// MocktransactionQueries is a mock of transactionQueries interface.
type MocktransactionQueries struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionQueriesMockRecorder
}

// MocktransactionQueriesMockRecorder is the mock recorder for MocktransactionQueries.
type MocktransactionQueriesMockRecorder struct {
	mock *MocktransactionQueries
}

// NewMocktransactionQueries creates a new mock instance.
func NewMocktransactionQueries(ctrl *gomock.Controller) *MocktransactionQueries {
	mock := &MocktransactionQueries{ctrl: ctrl}
	mock.recorder = &MocktransactionQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionQueries) EXPECT() *MocktransactionQueriesMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MocktransactionQueries) CreateTransaction(ctx context.Context, request pgstore.CreateTransactionParams) (pgstore.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, request)
	ret0, _ := ret[0].(pgstore.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MocktransactionQueriesMockRecorder) CreateTransaction(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MocktransactionQueries)(nil).CreateTransaction), ctx, request)
}

// MockITransactionService is a mock of ITransactionService interface.
type MockITransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionServiceMockRecorder
}

// MockITransactionServiceMockRecorder is the mock recorder for MockITransactionService.
type MockITransactionServiceMockRecorder struct {
	mock *MockITransactionService
}

// NewMockITransactionService creates a new mock instance.
func NewMockITransactionService(ctrl *gomock.Controller) *MockITransactionService {
	mock := &MockITransactionService{ctrl: ctrl}
	mock.recorder = &MockITransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionService) EXPECT() *MockITransactionServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockITransactionService) CreateTransaction(ctx context.Context, request transaction.CreateTransactionRequest) (pgstore.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, request)
	ret0, _ := ret[0].(pgstore.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockITransactionServiceMockRecorder) CreateTransaction(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockITransactionService)(nil).CreateTransaction), ctx, request)
}
